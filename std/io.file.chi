package std/io.file
import std/lang { luaExpr, embedLua }
import std/lang.option { Option }

type File = { class: string, file: any }

/// Returns a function that iterates over the lines of the file
pub fn lineIterator(fileName: string): () -> string|unit {
    luaExpr("io.lines(java.luaify(fileName))")
}

pub fn readAllLines(fileName: string): array[string] {
    var a = []
    embedLua("for line in io.lines(java.luaify(fileName)) do table.insert(a,line) end")
    a
}

pub fn writeString(fileName: string, value: string) {
    embedLua("local f=io.open(java.luaify(fileName),'w')")
    embedLua("f:write(value)")
    embedLua("f:close()")
}

pub fn readString(fileName: string): string {
    embedLua("local f=io.open(java.luaify(fileName),'r')")
    embedLua("local r=f:read('a')")
    embedLua("f:close()")
    luaExpr("r")
}

/// Opens a file
/// Modes: 
///  - "r" read mode
///  - "w" write mode
///  - "a" append mode
///  - "r+" update mode, all previous data is preserved
///  - "w+" update mode, all previous data is erased
///  - "a+" append update mode, previous data is preserved, 
///         writing is only allowed at the end of file
pub fn open(name: string, mode: string): Option[File] {
    val f = { class: "io.file.File", file: unit }
    embedLua("f.file = io.open(java.luaify(name), java.luaify(mode))")
    embedLua("if f.file == nil then return nil end")
    f
}

pub fn flush(file: File) {
    embedLua("file.file:flush()")
}

pub fn lines(file: File): () -> string|unit {
    luaExpr("file.file:lines()")
}

pub fn seekStart(file: File, offset: int) {
    embedLua("file.file:seek('set', offset)")
}

pub fn seek(file: File, offset: int) {
    embedLua("file.file:seek('cur', offset)")
}

pub fn seekEnd(file: File, offset: int) {
    embedLua("file.file:seek('end', offset)")
}

pub fn close(file: File) {
    embedLua("io.close(file.file)")
}

pub fn write(file: File, value: string | float | int) {
    embedLua("file.file:write(value)")
}

