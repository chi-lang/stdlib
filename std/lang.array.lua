if not chi.std__lang_array then chi.std__lang_array = { _package={}, _types={} } end;chi.std__lang_array._package.insertAt={public=true,mutable=false,type="BgQKBwABVAABAAADBwABVAABBQAA"};chi.std__lang_array._package.removeAt={public=true,mutable=false,type="BgMKBwACYTQAAgAAAwcAAmE0AAIAAA=="};chi.std__lang_array._package.addLast={public=true,mutable=false,type="BgMKBwABVAABAAAHAAFUAAEFAAA="};chi.std__lang_array._package.removeLast={public=true,mutable=false,type="BgIKBwACYTgAAgAABwACYTgAAgAA"};chi.std__lang_array._package.push={public=true,mutable=false,type="BgMKBwABVAABAAAHAAFUAAEFAAA="};chi.std__lang_array._package.pop={public=true,mutable=false,type="BgIKBwADYTEyAAIAAAcAA2ExMgACAAA="};chi.std__lang_array._package.joinToString={public=true,mutable=false,type="BgMKCQAEAwAAAAAEBAAA"};chi.std__lang_array._package.sort={public=true,mutable=false,type="BgIKBwABVAABAAAFAAA="};chi.std__lang_array._package.sortWith={public=true,mutable=false,type="BgMKBwABVAABAAAGAwcAAVQAAQcAAVQAAQEAAgABVAABVAUAAA=="};chi.std__lang_array._package.any={public=true,mutable=false,type="BgMKBwABVAABAAAGAgcAAVQAAQEAAQABVAEAAA=="};chi.std__lang_array._package.all={public=true,mutable=false,type="BgMKBwABVAABAAAGAgcAAVQAAQEAAQABVAEAAA=="};chi.std__lang_array._package.first={public=true,mutable=false,type="BgIKBwABVAABAAAJAQADc3RkAAtsYW5nLm9wdGlvbgAGT3B0aW9uBwABVAABBQAAAAA="};chi.std__lang_array._package.last={public=true,mutable=false,type="BgIKBwABVAABAAAJAQADc3RkAAtsYW5nLm9wdGlvbgAGT3B0aW9uBwABVAABBQAAAAA="};chi.std__lang_array._package.size={public=true,mutable=false,type="BgIKBwABVAABAAADAAA="};chi.std__lang_array._package.reverse={public=true,mutable=false,type="BgIKBwADYTMzAAIAAAoHAANhMzMAAgAAAAA="};chi.std__lang_array._package.map={public=true,mutable=false,type="BgMKBwABVAABAAAGAgcAAVQAAQcAA2EzOAACAAIAAVIAAVQKBwADYTM4AAIAAAAA"};chi.std__lang_array._package.forEach={public=true,mutable=false,type="BgMKBwABVAABAAAGAgcAAVQAAQUAAQABVAUAAA=="};chi.std__lang_array._package.fold={public=true,mutable=false,type="BgQKBwABVAABAAAHAAFSAAEGAwcAAVIAAQcAAVQAAQcAAVIAAQADAAFSAAFSAAFUBwABUgABAAA="};chi.std__lang_array._package.reduce={public=true,mutable=false,type="BgMKBwADYTQ4AAIAAAYDBwADYTQ4AAIHAANhNDgAAgcAA2E0OAACAAMAAVQAAVQAAVQHAANhNDgAAgAA"};chi.std__lang_array._package.sum={public=true,mutable=false,type="BgIKAwAAAwAA"};require("std/lang");require("std/lang.option");local tmp0=function(arr,index,value) table.insert(arr, index, value);return nil end;chi.std__lang_array.insertAt=tmp0;local tmp1=function(arr,index) return table.remove(arr, index) end;chi.std__lang_array.removeAt=tmp1;local tmp2=function(arr,value) table.insert(arr, value);return nil end;chi.std__lang_array.addLast=tmp2;local tmp3=function(arr) return table.remove(arr) end;chi.std__lang_array.removeLast=tmp3;local tmp4=function(arr,value) local tmp5=chi.std__lang_array.addLast(arr,value);return tmp5 end;chi.std__lang_array.push=tmp4;local tmp6=function(arr) local tmp7=chi.std__lang_array.removeLast(arr);return tmp7 end;chi.std__lang_array.pop=tmp6;local tmp8=function(arr,separator) return table.concat(arr, separator) end;chi.std__lang_array.joinToString=tmp8;local tmp9=function(arr) table.sort(arr);return nil end;chi.std__lang_array.sort=tmp9;local tmp10=function(arr,comp) table.sort(arr, comp);return nil end;chi.std__lang_array.sortWith=tmp10;local tmp11=function(arr,f) for i, v in ipairs(arr) do if f(v) then return true end end;return (false) end;chi.std__lang_array.any=tmp11;local tmp12=function(arr,f) for _, v in ipairs(arr) do if not f(v) then return false end end;return (true) end;chi.std__lang_array.all=tmp12;local tmp13=function(arr) return arr[1] end;chi.std__lang_array.first=tmp13;local tmp14=function(arr) return arr[#arr] end;chi.std__lang_array.last=tmp14;local tmp15=function(arr) return #arr end;chi.std__lang_array.size=tmp15;local tmp16=function(arr) local tmp17={};setmetatable(tmp17, array_meta_table);local result=tmp17;for _, v in ipairs(arr) do table.insert(result, 1, v) end;return result end;chi.std__lang_array.reverse=tmp16;local tmp18=function(arr,f) local tmp19={};setmetatable(tmp19, array_meta_table);local result=tmp19;for _, v in ipairs(arr) do table.insert(result, f(v)) end;return result end;chi.std__lang_array.map=tmp18;local tmp20=function(arr,f) for _, v in ipairs(arr) do f(v) end;return nil end;chi.std__lang_array.forEach=tmp20;local tmp21=function(arr,initialValue,f) local acc=initialValue;for _, v in ipairs(arr) do acc = f(acc, v) end;return acc end;chi.std__lang_array.fold=tmp21;local tmp22=function(arr,f) local tmp23=arr[(1)];local acc=tmp23;for i = 2, #arr do acc = f(acc, arr[i]) end;return acc end;chi.std__lang_array.reduce=tmp22;local tmp24=function(arr) local tmp25=function(a,b) return (a + b) end;local tmp26=chi.std__lang_array.reduce(arr,tmp25);return tmp26 end;chi.std__lang_array.sum=tmp24;return chi.std__lang_array.sum