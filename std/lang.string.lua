if not chi.std__lang_string then chi.std__lang_string = { _package={}, _types={} } end;chi.std__lang_string._package.len={public=true,mutable=false,type="BgIEAwAA"};chi.std__lang_string._package.reverse={public=true,mutable=false,type="BgIEBQAA"};chi.std__lang_string._package.find={public=true,mutable=false,type="BgMEBAMAAA=="};chi.std__lang_string._package.findFrom={public=true,mutable=false,type="BgQEBAMDAAA="};chi.std__lang_string._package.repeatTimes={public=true,mutable=false,type="BgMEAwQAAA=="};chi.std__lang_string._package.repeatSeparated={public=true,mutable=false,type="BgQEAwQEAAA="};chi.std__lang_string._package.substringFrom={public=true,mutable=false,type="BgMEAwQAAA=="};chi.std__lang_string._package.substring={public=true,mutable=false,type="BgQEAwMEAAA="};chi.std__lang_string._package.toLower={public=true,mutable=false,type="BgIEBAAA"};chi.std__lang_string._package.toUpper={public=true,mutable=false,type="BgIEBAAA"};chi.std__lang_string._package.replace={public=true,mutable=false,type="BgQEBAQEAAA="};chi.std__lang_string._package.codePointAt={public=true,mutable=false,type="BgMEAwMAAA=="};chi.std__lang_string._package.codePoints={public=true,mutable=false,type="BgIECgMAAAAA"};chi.std__lang_string._package.isWhitespace={public=true,mutable=false,type="BgIDAQAA"};chi.std__lang_string._package.isDigit={public=true,mutable=false,type="BgIDAQAA"};chi.std__lang_string._package.forEachCodePoint={public=true,mutable=false,type="BgMEBgIDBQAABQAA"};chi.std__lang_string._package.allCodePoints={public=true,mutable=false,type="BgMEBgIDAQAAAQAA"};chi.std__lang_string._package.anyCodePoint={public=true,mutable=false,type="BgMEBgIDAQAAAQAA"};chi.std__lang_string._package.isEmpty={public=true,mutable=false,type="BgIEAQAA"};chi.std__lang_string._package.isNotEmpty={public=true,mutable=false,type="BgIEAQAA"};chi.std__lang_string._package.isBlank={public=true,mutable=false,type="BgIEAQAA"};chi.std__lang_string._package.trimStart={public=true,mutable=false,type="BgIEBAAA"};chi.std__lang_string._package.trimEnd={public=true,mutable=false,type="BgIEBAAA"};chi.std__lang_string._package.trim={public=true,mutable=false,type="BgIEBAAA"};chi.std__lang_string._package.startsWith={public=true,mutable=false,type="BgMEBAEAAA=="};chi.std__lang_string._package.endsWith={public=true,mutable=false,type="BgMEBAEAAA=="};chi.std__lang_string._package.contains={public=true,mutable=false,type="BgMEBAEAAA=="};chi.std__lang_string._package.split={public=true,mutable=false,type="BgMEBAoEAAAAAA=="};chi.std__lang_string._package.removePrefix={public=true,mutable=false,type="BgMEBAQAAA=="};require("std/lang");local tmp0=function(s) return utf8.len(s) end;chi.std__lang_string.len=tmp0;local tmp1=function(s) return string.reverse(s) end;chi.std__lang_string.reverse=tmp1;local tmp2=function(s,pattern) return string.find(s, pattern, 1, true) end;chi.std__lang_string.find=tmp2;local tmp3=function(s,pattern,from) return string.find(s, pattern, from, true) end;chi.std__lang_string.findFrom=tmp3;local tmp4=function(s,times) return string.rep(s, times) end;chi.std__lang_string.repeatTimes=tmp4;local tmp5=function(s,times,separator) return string.rep(s, times, separator) end;chi.std__lang_string.repeatSeparated=tmp5;local tmp6=function(s,from) return string.sub(s, from) end;chi.std__lang_string.substringFrom=tmp6;local tmp7=function(s,from,to) return string.sub(s, from, to) end;chi.std__lang_string.substring=tmp7;local tmp8=function(s) return string.lower(s) end;chi.std__lang_string.toLower=tmp8;local tmp9=function(s) return string.upper(s) end;chi.std__lang_string.toUpper=tmp9;local tmp10=function(s,pattern,replacement) return string.gsub(s, pattern, replacement) end;chi.std__lang_string.replace=tmp10;local tmp11=function(s,index) return utf8.codepoint(s, index) end;chi.std__lang_string.codePointAt=tmp11;local tmp12=function(s) local tmp13={};setmetatable(tmp13, array_meta_table);local x=tmp13;for _, c in utf8.codes(s) do table.insert(x, c) end;return x end;chi.std__lang_string.codePoints=tmp12;local tmp14=function(cp) return ((((28) <= cp) and (cp <= (32))) or (((9) <= cp) and (cp <= (14)))) end;chi.std__lang_string.isWhitespace=tmp14;local tmp15=function(codePoint) return (((48) <= codePoint) and (codePoint <= (57))) end;chi.std__lang_string.isDigit=tmp15;local tmp16=function(s,f) local cp=(0);for _, cp in utf8.codes(s) do;f(cp);end;return nil end;chi.std__lang_string.forEachCodePoint=tmp16;local tmp18=function(s,f) for _, cp in utf8.codes(s) do if not f(cp) then return false end end;return (true) end;chi.std__lang_string.allCodePoints=tmp18;local tmp19=function(s,f) for _, cp in utf8.codes(s) do if f(cp) then return true end end;return (false) end;chi.std__lang_string.anyCodePoint=tmp19;local tmp20=function(s) local tmp21=chi.std__lang_string.len(s);return (tmp21 == (0)) end;chi.std__lang_string.isEmpty=tmp20;local tmp22=function(s) local tmp23=chi.std__lang_string.isEmpty(s);local tmp24=not tmp23;return tmp24 end;chi.std__lang_string.isNotEmpty=tmp22;local tmp25=function(s) local tmp26=chi.std__lang_string.allCodePoints(s,chi.std__lang_string.isWhitespace);return tmp26 end;chi.std__lang_string.isBlank=tmp25;local tmp27=function(s) local start=(1);local tmp32=function() return start end;local tmp28=tmp32;local tmp33=function() local tmp34=chi.std__lang_string.len(s);return tmp34 end;local tmp29=tmp33;local tmp35=function() return (1) end;local tmp30=tmp35;local tmp36=function() local tmp37=chi.std__lang_string.isWhitespace(utf8.codepoint(s, start));return tmp37 end;local tmp31=tmp36;while ((tmp28() < (tmp29() - tmp30())) and tmp31()) do start=(start + (1));end;local tmp38=chi.std__lang_string.substringFrom(s,start);return tmp38 end;chi.std__lang_string.trimStart=tmp27;local tmp39=function(s) local last=((0) - (1));local tmp40=chi.std__lang_string.len(s);local strlen=((0) - tmp40);local tmp44=function() return last end;local tmp41=tmp44;local tmp45=function() return strlen end;local tmp42=tmp45;local tmp46=function() local tmp47=chi.std__lang_string.codePointAt(s,last);local tmp48=chi.std__lang_string.isWhitespace(tmp47);return tmp48 end;local tmp43=tmp46;while ((tmp41() > tmp42()) and tmp43()) do last=(last - (1));end;local tmp49=chi.std__lang_string.substring(s,(1),last);return tmp49 end;chi.std__lang_string.trimEnd=tmp39;local tmp50=function(s) local tmp51=chi.std__lang_string.trimStart(s);local tmp52=chi.std__lang_string.trimEnd(tmp51);return tmp52 end;chi.std__lang_string.trim=tmp50;local tmp53=function(s,other) local tmp54=chi.std__lang_string.len(other);local tmp55=chi.std__lang_string.substring(s,(1),tmp54);return (tmp55 == other) end;chi.std__lang_string.startsWith=tmp53;local tmp56=function(s,other) local tmp57=chi.std__lang_string.len(other);local tmp58=chi.std__lang_string.substringFrom(s,((0) - tmp57));return (tmp58 == other) end;chi.std__lang_string.endsWith=tmp56;local tmp59=function(s,other) return string.find(s, other) ~= nil end;chi.std__lang_string.contains=tmp59;local tmp60=function(s,separator) local tmp61={};setmetatable(tmp61, array_meta_table);local result=tmp61;for str in string.gmatch(s, '([^'.. separator ..']+)') do table.insert(result, str) end;return result end;chi.std__lang_string.split=tmp60;local tmp62=function(s,prefix) local tmp63;local tmp64=chi.std__lang_string.startsWith(s,prefix);if tmp64 then local tmp65=chi.std__lang_string.len(prefix);local tmp66=chi.std__lang_string.substringFrom(s,tmp65);tmp63 = tmp66 else tmp63 = s end;return tmp63 end;chi.std__lang_string.removePrefix=tmp62;return chi.std__lang_string.removePrefix