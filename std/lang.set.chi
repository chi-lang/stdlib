package std/lang.set

import std/lang { luaExpr, embedLua }
import std/lang.any {
    toString as anyToString, 
    hashCode as anyHashCode,
    equals as anyEquals
}

type Set[T] = { class: string, set: {}, hash: (T) -> int }

pub fn emptySet[T](): Set[T] {
    val set = { class: "lang.set.Set", set: {}, hash: anyHashCode as (T) -> int }
    set
}

pub fn fromArray[T](arr: array[T]): Set[T] {
    val set = emptySet()
    arr.forEach() { it ->
        set.add(it)
    }
    set
}


pub fn add[T](set: Set[T], value: T) {
    val hash = set.hash(value)
    val a: array[T] = luaExpr("rawget(set.set,hash) or chi_new_array()")
    if a.all { it -> !anyEquals(it, value) } {
        a.addLast(value)
    }
    embedLua("rawset(set.set,hash,a)")
}

pub fn remove[T](set: Set[T], value: T) {
    val hash = set.hash(value)
    val a: array[T] = luaExpr("rawget(set.set,hash) or chi_new_array()")
    val index = a.indexOf { it -> anyEquals(it, value) }
    if index != unit {
        a.removeAt(index as int)
    }

    if a.isEmpty() {
        embedLua("rawset(set.set,hash,nil)")
    } else {
        embedLua("rawset(set.set,hash,a)")
    }
}

pub fn contains[T](set: Set[T], value: T): bool {
    val hash = set.hash(value)
    val a: array[T] = luaExpr("rawget(set.set,hash) or chi_new_array()")
    val index = a.indexOf { it -> anyEquals(it, value) }
    index != unit
}

pub fn size[T](set: Set[T]): int {
    var result = 0
    embedLua("for h,a in pairs(set.set) do result = result + #a end")
    result
}

pub fn forEach[T](set: Set[T], f: (T) -> unit) {
    embedLua("for k,a in pairs(set.set) do for _,v in ipairs(a) do f(v) end end")
}

pub fn toArray[T](set: Set[T]): array[T] {
    val result = []
    set.forEach() { it ->
        result.push(it)
    }
    result
}

pub fn toString[T](set: Set[T]): string {
    val elements = []
    set.forEach { it ->
        elements.addLast(anyToString(it))
    }
    val content = elements.intersperse(", ").joinToString()
    "{$content}"
}

//{
//    val a = { x: -31, y: 47 }
//    val b = { x: -34, y: 20 }
//    println(anyHashCode(a))
//    println(anyHashCode(b))
//
//    val s = emptySet()
//    s.add(a)
//    s.add(b)
//    s.add(b)
//    s.add(a)
//    s.add(b)
//    s.add(b)
//    s.add(a)
//
//    println(s)
//}()
