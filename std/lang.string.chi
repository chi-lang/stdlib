package std/lang.string

import std/lang.option { Option }
import std/lang { luaExpr, embedLua }
import std/math { pow }

type CodePoint = int

pub fn len(s: string): int {
    luaExpr("s:length()")
}

pub fn reverse(s: string) {
    luaExpr("chistr.reverse(s)")
}

pub fn find(s: string, pattern: string, from: int = 1): Option[int] {
    val index = luaExpr("s:indexOf(pattern, from-1)")
    if index >= 0 {
        index+1
    }
}

pub fn substring(s: string, from: int = 1, to: int = s.len()): string {
    luaExpr("chi_new_string(s:substring(from-1, to))")
}

pub fn toLower(s: string): string {
    luaExpr("s:toLowerCase()")
}

pub fn toUpper(s: string): string {
    luaExpr("s:toUpperCase()")
}

pub fn replace(s: string, pattern: string, replacement: string): string {
    luaExpr("s:replace(pattern, replacement)")
}

pub fn replaceAll(s: string, pattern: string, replacement: string): string {
    luaExpr("s:replaceAll(pattern, replacement)")
}

pub fn codePointAt(s: string, index: int): CodePoint {
    luaExpr("s:codePointAt(index-1)")
}

pub fn codePoints(s: string): () -> Option[CodePoint] {
    luaExpr("chistr.codePoints(s)")
}

pub fn isWhitespace(cp: CodePoint): bool {
    (28 <= cp && cp <= 32) || (9 <= cp && cp <= 14)
}

pub fn isDigit(codePoint: CodePoint): bool {
    48 <= codePoint && codePoint <= 57
}

pub fn forEachCodePoint(s: string, f: (CodePoint) -> unit) {
    for cp in s.codePoints() {
        f(cp)
    }
}

pub fn allCodePoints(s: string, f: (CodePoint) -> bool): bool {
    for cp in s.codePoints() {
        if !f(cp) { 
            return false
        }
    }
    true
}


pub fn anyCodePoint(s: string, f: (int) -> bool): bool {
    for cp in s.codePoints() {
        if f(cp) {
            return true
        }
    }
    false
}

pub fn isEmpty(s: string): bool {
    luaExpr("s:isEmpty()")
}

pub fn isNotEmpty(s: string): bool {
    !isEmpty(s)
}

pub fn isBlank(s: string): bool {
    s.allCodePoints(isWhitespace) 
}

pub fn trimStart(s: string): string {
    luaExpr("chistr.trimStart(s)")
}


pub fn trimEnd(s: string): string {
    luaExpr("chistr.trimEnd(s)")
}

pub fn trim(s: string): string {
    luaExpr("s:trim()")
}

pub fn startsWith(s: string, other: string): bool {
    luaExpr("s:startsWith(other)")

}

pub fn endsWith(s: string, other: string): bool {
    luaExpr("s:endsWith(other)")
}

pub fn contains(s: string, other: string): bool {
    luaExpr("s:contains(other)")
}

pub fn split(s: string, pattern: string): array[string] {
    val array = luaExpr("java.luaify(s:split(pattern))")
    embedLua("setmetatable(array, array_meta_table)")
    (array as array[string]).map { it -> luaExpr("chi_new_string(it)") } as array[string]
}


pub fn removePrefix(s: string, prefix: string): string {
    if s.startsWith(prefix) {
        substring(s, prefix.len()+1)
    } else {
        s
    }
}

pub fn hashCode(s: string): int {
    var hc = 0
    var x = s.len()-1
    for cp in s.codePoints() {
        hc += cp * pow(31,x)
        x -= 1
    }
    hc
}

pub fn toInt(s: string): int {
    luaExpr("tonumber(java.luaify(s))")
}
